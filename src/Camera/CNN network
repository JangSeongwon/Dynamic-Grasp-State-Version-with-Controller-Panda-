import torch.nn as nn

class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()

        self.layer = nn.Sequential(
            # [3,84,84] -> [16,80,80]
            nn.Conv2d(3, 16, 5),
            nn.ReLU(),
            # [16,80,80] -> [48,76,76]
            nn.Conv2d(16, 48, 5),
            nn.ReLU(),
            # [48, 76, 76] -> [96,72,72]
            nn.Conv2d(48, 96, 5),
            nn.ReLU(),
            # [96,72,72] -> [96,36,36]
            nn.MaxPool2d(kernel_size=2, stride=2),

            # [96,36, 36] -> [192,32,32]
            nn.Conv2d(96, 192, 5),
            nn.ReLU(),
            # [192,31,31] -> [384,28,28]
            nn.Conv2d(192, 384, 5),
            nn.ReLU(),
            # [384, 26, 26] -> [768, 24, 24]
            nn.Conv2d(384, 768, 5),
            nn.ReLU(),
            # [768, 22, 22] -> [1536,20,20]
            nn.Conv2d(768, 1536, 5),
            nn.ReLU(),
            # [1536,18,18] -> [1536,10,10]
            nn.MaxPool2d(kernel_size=2, stride=2)

        )

        self.fclayer = nn.Sequential(
            nn.Linear(1536*10*10, 1000),
            nn.Linear(1000, 100)
        )

    def forward(self, data):
        #print(data)
        feature_map=self.layer(data)
        feature_map = feature_map.view(feature_map.size(0), -1)
        feature_map=self.fclayer(feature_map)
        #print(feature_map.shape)

        return feature_map


